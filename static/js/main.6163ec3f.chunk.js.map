{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","defaultState","status","ALL","query","filterReducer","value","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","useMemo","ACTIVE","completed","COMPLETED","title","toLowerCase","includes","length","className","map","id","classNames","onClick","handleSelectTodo","TodoFilter","onSubmit","event","preventDefault","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","loadData","a","userFromServer","Error","userId","href","email","name","App","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6163ec3f.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = {\n  type: 'filter/STATUS',\n  payload: Status,\n};\n\ntype QueryAction = {\n  type: 'filter/QUERY',\n  payload: string,\n};\n\nconst status = (value: Status): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nconst query = (value: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\ntype Action = StatusAction | QueryAction;\n\ntype State = {\n  status: Status,\n  query: string,\n};\n\nconst defaultState: State = {\n  status: Status.ALL,\n  query: '',\n};\n\nconst filterReducer = (state = defaultState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { status, query };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = {\n  type: 'todos/ADD',\n  payload: Todo[],\n};\n\nconst addTodos = (value: Todo[]): AddAction => ({\n  type: 'todos/ADD',\n  payload: value,\n});\n\ntype Action = AddAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { addTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const visibleTodos = useMemo(() => {\n    const filteredTodos = todos.filter(todo => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n\n        case Status.COMPLETED:\n          return todo.completed;\n\n        case Status.ALL:\n        default:\n          return todo;\n      }\n    }).filter(({ title }) => (\n      title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    return filteredTodos;\n  }, [status, todos, query]);\n\n  const handleSelectTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {(visibleTodos.length === 0) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span\n                    className=\"icon\"\n                    data-cy=\"iconCompleted\"\n                  >\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  {\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleSelectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far',\n                      {\n                        'fa-eye': (selectedTodo?.id !== todo.id),\n                        'fa-eye-slash': (selectedTodo?.id === todo.id),\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\">\n            <option value=\"all\">{Status.ALL}</option>\n            <option value=\"active\">{Status.ACTIVE}</option>\n            <option value=\"completed\">{Status.COMPLETED}</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(500)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async (id: number) => {\n      try {\n        const userFromServer = await getUser(id);\n\n        setUser(userFromServer);\n      } catch (error) {\n        throw new Error('Not defined');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (!selectedTodo) {\n      return;\n    }\n\n    loadData(selectedTodo.userId);\n  }, [selectedTodo]);\n\n  const handleCloseTodo = () => (\n    dispatch(actions.removeTodo())\n  );\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                aria-label=\"modal-close\"\n                onClick={() => handleCloseTodo()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo?.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n                {user && (\n                  <>\n                    {' by '}\n                    <a href={`mailto:${user.email}`}>{user.name}</a>\n                  </>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { actions } from './features/todos';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(actions.addTodos(todosFromServer));\n      } catch (error) {\n        throw new Error('Not defined');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}